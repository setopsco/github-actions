name: "Setops deployment"
description: "Creates and activates images for multiple apps within a SetOps stage, performs a predeploy command, waits for the new tasks to become healthy"

inputs:
  setops-organization:
    description: The SetOps organization
    required: false
  setops-project:
    description: The SetOps project name
    required: true
  setops-username:
    description: The SetOps username, usually obtained via secrets.SETOPS_USER
    required: true
  setops-password:
    description: The SetOps password, usually obtained via secrets.SETOPS_PASSWORD
    required: true
  setops-stage:
    description: The setops stage for the deployment, e.g. production
    required: true
  setops-apps:
    description: The SetOps apps to deploy, space separated, e.g. "app1 app2 app3"
    required: true
  setops-api-domain:
    description: The SetOps API URL to connect to
    default: "api.setops.co"
    required: false
  setops-definition:
    description: The SetOps definition to be applied (leave empty if only new images should be applied)
    required: false
  setops-version:
    description: "The version of SetOps CLI to install. Instead of a full version string you can also specify a constraint string. Examples are: `<0.1.5`, `~0.1.4`, `0.1.x` (all three installing the latest available 0.1.4 version). Defaults to `latest`."
    required: false
  image-tag:
    description: The image tag that was used to tag the image to the SetOps registry
    required: true
  number-of-retries-to-wait-for-successful-deployment:
    description: Max. number of times to wait for a successful deployment (we sleep for 5 seconds between tries, so 12 equals 1 minute)
    required: false
    default: "120"
  predeploy-command:
    description: A predeploy command to be run before activating the images, e.g. for migrating the database
    required: false
  predeploy-command-detach-timeout:
    description: Detach timeout for one-off task that runs predeploy command (h = hours, m = minutes, s = second, ms = milliseconds)
    required: false
    default: "10m"
  predeploy-command-cpu:
    description: CPU units to provide to the predeploy command. 1024 units are 1 vCPU. Defaults to the configured app CPU units if not passed in.
    required: false
  predeploy-command-memory:
    description: Memory to provide to the predeploy command in MB. Defaults to the configured app memory if not passed in.
    required: false
  github-token:
    description: GitHub token to reduce the risk of rate limits when downloading the requested SetOps CLI
    required: false
runs:
  using: composite
  steps:
    - name: Install Setops
      uses: setopsco/github-actions/setup@v2
      with:
        setops_api_url: https://${{ inputs.setops-api-domain }}
        setops_organization: ${{ inputs.setops-organization }}
        setops_username: ${{ inputs.setops-username }}
        setops_password: ${{ inputs.setops-password }}
        setops_version: ${{ inputs.setops-version }}
        github_token: ${{ inputs.github-token }}
    - name: Setops deployment
      run: |
        shopt -s expand_aliases
        alias sos='setops -p ${{ inputs.setops-project }} -s ${{ inputs.setops-stage }}'

        read -r -a apps <<< "${{ inputs.setops-apps }}"

        # apply the given definition so the predeploy command will not fail e.g. for a missing app or service
        if [ ! -z "$SETOPS_DEFINITION" ]; then
          sos stage:apply -f "$SETOPS_DEFINITION" --auto-approve
        fi

        if [ ${#PREDEPLOY_COMMAND} -gt 0 ]; then
          echo "Run predeploy command"
          first_app=${apps[0]}
          resource_parameters=''
          [ ${#PREDEPLOY_COMMAND_CPU} -gt 0 ] && resource_parameters="$resource_parameters --cpu $PREDEPLOY_COMMAND_CPU"
          [ ${#PREDEPLOY_COMMAND_MEMORY} -gt 0 ] && resource_parameters="$resource_parameters --memory $PREDEPLOY_COMMAND_MEMORY"

          detach_timeout=''
          [ ${#PREDEPLOY_DETACH_TIMEOUT} -gt 0 ] && detach_timeout="--detach-timeout $PREDEPLOY_DETACH_TIMEOUT"
          task_id=$(sos --app "$first_app" task:run $detach_timeout --image-tag "$IMAGE_TAG" --entrypoint sh $resource_parameters -- -c "$PREDEPLOY_COMMAND && echo SETOPS_SUCCESS" | tee /dev/stderr | grep -oP '^ID:   \K[a-z0-9]+$')

          # Checking the expected SETOPS_SUCCESS log after task finished to ensure that all logs are collected
          sos --app "$first_app" log -n 50 --task "$task_id" | grep SETOPS_SUCCESS > /dev/null
        else
          echo "No predeploy command has been configured, skipping."
        fi

        # apply the updated image-tags
        COUNT=1
        apps_with_image_tags=""
        for app in "${apps[@]}"; do
          apps_with_image_tags="${apps_with_image_tags}${app}=${{ inputs.image-tag }}"
          if [[ "#apps[@]" != "$COUNT" ]]; then
            apps_with_image_tags="${apps_with_image_tags},"
          fi
          ((COUNT+=1))
        done
        sos stage:apply -t $apps_with_image_tags --auto-approve

        echo "Waiting for successful deployment"
        max_times=${{ inputs.number-of-retries-to-wait-for-successful-deployment }}
        for app in "${apps[@]}"; do
          # Checking for health state of HEALTHY when health check is configured or otherwise accept UNKNOWN
          app_info=$(sos app:info $app)
          expected_health_status=UNKNOWN
          if echo "$app_info" | grep -A1  "Health Check:" | grep -q "   Command:"; then
            expected_health_status=HEALTHY
          fi

          for i in $(seq 1 $max_times); do
            sleep 5

            if sos --app $app task | grep -w -E "$IMAGE_TAG.*RUNNING.*$expected_health_status"; then break; fi
            echo "Continue waiting for $app with image tag $IMAGE_TAG"

            if [ $i = $max_times ]; then exit 1; fi
          done
        done
      env:
        # Providing it as an env variable to prevent quoting issues
        PREDEPLOY_COMMAND: ${{ inputs.predeploy-command }}
        PREDEPLOY_COMMAND_CPU: ${{ inputs.predeploy-command-cpu }}
        PREDEPLOY_COMMAND_MEMORY: ${{ inputs.predeploy-command-memory }}
        PREDEPLOY_DETACH_TIMEOUT: ${{ inputs.predeploy-command-detach-timeout }}
      shell: bash
